/*

    Din uppgift

    Du skall med hj√§lp av HTML, CSS och Javascript g√∂ra en todo-applikation.
    I applikationen skall en anv√§ndare kunna l√§gga till och ta bort √§renden fr√•n en ‚Äúatt g√∂ra‚Äù-lista.
    Du f√•r g√∂ra precis som du vill med styling. Applikationen har olika krav beroende p√• betygsniv√•.


    Krav f√∂r godk√§nt (G):

    Applikationen skall ha ett inmatningsf√§lt med tillh√∂rande knapp d√§r anv√§ndaren kan fylla i en ny todo.

    N√§r anv√§ndaren klickar p√• en ‚Äúl√§gg till‚Äù-knapp, eller trycker p√• Enter-tangenten p√• tangentbordet skall 
    todo:n l√§ggas till i en lista p√• todos. Inmatningsf√§ltet skall t√∂mmas n√§r en todo lags till i listan.

    Applikationen skall √§ven ha en lista √∂ver redan inmatade todos.
    I listan √∂ver inmatade todos skall det ocks√• finnas en knapp f√∂r varje todo, 
    d√§r anv√§ndaren kan ta bort en todo ur listan. 
    N√§r anv√§ndaren klickar p√• ‚Äúta bort‚Äù-knappen skall todo:n tas bort ur listan.

    Applikationen skall √§ven ha ett f√§lt som kan anv√§ndas f√∂r att filtrera todos.
    N√§r anv√§ndaren skriver i f√§ltet skall bara de todos som inneh√•ller textstr√§ngen anv√§ndaren skriver in synas.
    Om f√§ltet √§r tomt skall alla todos visas.


    Krav f√∂r v√§l godk√§nt (VG):

    Applikationen skall ha ett formul√§r d√§r anv√§ndaren kan fylla i sin todo.

    Det skall inneh√•lla:
    - ett textf√§lt d√§r sj√§lva √§rendet kan skrivas in
    - ett datumf√§lt d√§r ett sista datum f√∂r √§rendet skall v√§ljas, f√§ltet skall ha dagens datum som defaultv√§rde
    - en selectbox d√§r anv√§ndaren kan v√§lja vilken kategori √§rendet tillh√∂r. Du kan sj√§lv v√§lja vilka kategorier som 
    skall finnas (t.ex. ‚Äúhush√•llsarbete‚Äù eller ‚Äújobb‚Äù)
    - en ‚Äúl√§gg till‚Äù-knapp
    - N√§r anv√§ndaren ‚Äúskickar formul√§ret‚Äù (klickar p√• knappen) s√• skall √§rendet l√§ggas till i en todolista.

    Applikationen skall √§ven ha en lista √∂ver redan inmatade todos.
    I listan skall man se sj√§lva √§rendetexten, slutdatumet, kategorin f√∂r varje todo.
    Om slutdatumet √§r tidigare √§n dagens datum ska det finnas en grafisk varning som visar att slutdatumet √§r passerat.
    I listan √∂ver inmatade todos skall det ocks√• finnas en knapp f√∂r varje todo, 
    d√§r anv√§ndaren kan ta bort en todo ur listan.
    N√§r anv√§ndaren klickar p√• ‚Äúta bort‚Äù-knappen skall todo:n tas bort ur listan.

    Applikationen skall √§ven ha ett f√§lt som kan anv√§ndas f√∂r att filtrera todos.
    N√§r anv√§ndaren skriver i f√§ltet skall bara de todos som inneh√•ller textstr√§ngen anv√§ndaren skriver in synas.
    Om f√§ltet √§r tomt skall alla todos visas.

    Applikationen skall √§ven ha en lista med radiobuttons, en f√∂r varje kategori, och en f√∂r ‚Äúalla‚Äù.
    Om anv√§ndaren klickar i en radiobutton skall bara √§renden f√∂r den kategorin visas.

    Om b√•de en radiobutton √§r iklickad och fritextf√§ltet har text skall b√•da anv√§ndas.
    Filtrera f√∂rst fram allt som √§r i en viss kategori, och g√∂r sedan fritextfiltreringen baserat p√• det.

 */

let toDoItems = JSON.parse(localStorage.getItem("todo"));

if (!toDoItems || Object.keys(toDoItems).length === 0) {
  toDoItems = {
    1: {
      task: "clean house",
      deadline: "2020-12-02",
      category: "Misc"
    },
    2: {
      task: "watch a movie",
      deadline: "2020-11-04",
      category: "R&R"
    },
    3: {
      task: "bake bread with family",
      deadline: "2020-11-04",
      category: "Family"
    },
    4: {
      task: "move to appartment",
      deadline: "2020-11-02",
      category: "Misc"
    },
    5: {
      task: "sell car to friend",
      deadline: "2020-01-02",
      category: "Work"
    }
  };
}

let nextId = Object.keys(toDoItems).length + 1;

const TASK_CATEGORIES = ["All", "Family", "Work", "R&R", "Misc"];

// update new errand date selector min value
function updateMinimumDate() {
  const currentDate = new Date();
  const date = currentDate.getDate();
  const month = currentDate.getMonth();
  const year = currentDate.getFullYear();

  const yyyymmdd = year + "-" + pad(month + 1) + "-" + pad(date);

  const dateInput = document.querySelector("#dateSelector");
  dateInput.setAttribute("value", yyyymmdd);
  dateInput.setAttribute("min", yyyymmdd);

  function pad(n) {
    return n < 10 ? "0" + n : n;
  }
}
updateMinimumDate();

function buildRadioButtons(categories) {
  const container = document.querySelector("#radioButtonContainer");
  categories.forEach(function(category) {
    const input = document.createElement("input");
    input.setAttribute("type", "radio");
    input.setAttribute("name", "categoryInputGroup");
    input.setAttribute("value", category);
    input.addEventListener("click", function() {
      drawFilteredList(toDoItems);
    });

    if (category === "All") input.checked = true;

    const label = document.createElement("label");
    label.textContent = category;

    container.appendChild(input);
    container.appendChild(label);
  });
}

buildRadioButtons(TASK_CATEGORIES);

function fillCategoryDropDown() {
  const select = document.querySelector("#categorySelector");
  TASK_CATEGORIES.forEach(function(category) {
    if (category === "All") return;
    const option = document.createElement("option");
    option.setAttribute("value", category);
    option.textContent = category;
    select.appendChild(option);
  });
}
fillCategoryDropDown();

const submitButton = document.querySelector("#newTaskSubmit");
submitButton.addEventListener("click", createNewTask);

function createNewTask() {
  // task description can't be empty
  const textInput = document.querySelector("#newTaskInput");
  if (textInput.value.length === 0) {
    textInput.focus();
    textInput.classList.replace("borderWhite", "borderRed");
    return;
  }

  // deadline can't be before current time
  const dateInput = document.querySelector("#dateSelector");
  if (dateInput.validity.valid === false) {
    dateInput.focus();
    return;
  }

  const newTask = {};
  newTask["task"] = textInput.value;
  newTask["category"] = document.querySelector("#categorySelector").value;
  newTask["deadline"] = document.querySelector("#dateSelector").value;

  textInput.value = "";
  dateInput.classList.remove("borderRed");

  console.log(Object.keys(toDoItems).length, toDoItems);

  toDoItems[nextId] = newTask;
  nextId++;

  textInput.focus();
  localStorage.setItem("todo", JSON.stringify(toDoItems));

  drawFilteredList(toDoItems);
}

const filterField = document.querySelector("#filterInput");
filterField.addEventListener("input", function() {
  drawFilteredList(toDoItems);
});

function drawFilteredList(toDoItems) {
  const filterField = document.querySelector("#filterInput");
  const selectedCategory = document.querySelector('input[name="categoryInputGroup"]:checked').value;
  const filteredItems = [];
  for (const index in toDoItems) {
    const item = toDoItems[index];
    const isCorrectCategory = selectedCategory === "All" || selectedCategory === item["category"];
    const includesKeyword = item["task"].toLowerCase().includes(filterField.value.toLowerCase());
    if (isCorrectCategory && includesKeyword) filteredItems[index] = item;
  }

  drawTodoList(filteredItems);
}

function drawTodoList(toDoItems) {
  const newList = document.createElement("tbody");
  newList.setAttribute("id", "todo-table-body");

  for (const index in toDoItems) {
    const item = toDoItems[index];

    const tr = document.createElement("tr");

    const tdTask = document.createElement("td");
    tdTask.textContent = `${item["task"]}`; // id[${index}]
    tr.appendChild(tdTask);

    const tdDate = document.createElement("td");
    tdDate.textContent = item["deadline"];
    tdDate.classList.add("dealineCell");
    if (isOverdue(item["deadline"])) tdDate.classList.add("overdue");
    tr.appendChild(tdDate);

    const tdCategory = document.createElement("td");
    tdCategory.classList.add("categoryCell");
    tdCategory.textContent = item["category"];
    tr.appendChild(tdCategory);

    const tdDelete = document.createElement("td");
    tdDelete.classList.add("deleteButtonCell");
    tdDelete.setAttribute("id", "deleteItem" + index + "Button");
    tdDelete.addEventListener("click", clickDeleteButton);
    tdDelete.textContent = "üóëÔ∏è";
    tr.appendChild(tdDelete);

    newList.appendChild(tr);

    function isOverdue(dateStr) {
      let currentDate = new Date();
      currentDate.setHours(0);
      currentDate.setMinutes(0);
      currentDate.setSeconds(0);
      currentDate.setMilliseconds(0);
      const targetDate = new Date(dateStr.replace(/(\d{4})-(\d{2})-(\d{2})/, "$1/$2/$3"));
      return targetDate - currentDate < 0;
    }
  }

  const oldList = document.querySelector("#todo-table-body");
  document.querySelector("#todo-table").replaceChild(newList, oldList);
}

drawTodoList(toDoItems);

function clickDeleteButton(e) {
  const itemIndex = Number(e.currentTarget.getAttribute("id").match(/\d+/));
  delete toDoItems[itemIndex];
  localStorage.setItem("todo", JSON.stringify(toDoItems));
  drawFilteredList(toDoItems);
}

const taskDescriptionField = document.querySelector("#newTaskInput");
taskDescriptionField.addEventListener("input", function(e) {
  // reset input field border color
  e.currentTarget.classList.remove("borderRed");
  e.currentTarget.classList.add("borderWhite");
});
